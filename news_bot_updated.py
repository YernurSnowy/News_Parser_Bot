import asyncio, logging, datetime
from dateutil import parser
from aiogram import Bot, Dispatcher, F, types
from aiogram.filters import CommandStart
from aiogram.types import (Message, CallbackQuery, 
                           InlineKeyboardMarkup, InlineKeyboardButton, 
                           ReplyKeyboardMarkup, KeyboardButton)

import requests
import fake_useragent
from bs4 import BeautifulSoup

import psycopg2

from config import TOKEN, POSTGRESQL_URI

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö PostgreSQL
connection = psycopg2.connect(POSTGRESQL_URI)
cursor = connection.cursor()

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
async def add_user(user_id, user_name):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        cursor.execute("SELECT * FROM users WHERE user_id = %s", (user_id,))
        existing_user = cursor.fetchone()

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤—Å—Ç–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        if not existing_user:
            cursor.execute("INSERT INTO users (user_id, user_name, notifications) VALUES (%s, %s, FALSE)", (user_id, user_name))
            connection.commit()
    except psycopg2.Error as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö:", e)

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π "True"
async def update_notifications_to_true(user_id):
    try:
        cursor.execute("UPDATE users SET notifications = TRUE WHERE user_id = %s", (user_id,))
        connection.commit()
    except psycopg2.Error as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Å—Ç–∞—Ç—É—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π 'True':", e)

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π "False"
async def update_notifications_to_false(user_id):
    try:
        cursor.execute("UPDATE users SET notifications = FALSE WHERE user_id = %s", (user_id,))
        connection.commit()
    except psycopg2.Error as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Å—Ç–∞—Ç—É—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π 'False':", e)

# –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(CommandStart())
async def cmd_start(message: Message):
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —á–∞—Ç–∞ —Å –±–æ—Ç–æ–º
    await add_user(message.from_user.id, message.from_user.username)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n"
                         "–î–∞–Ω–Ω—ã–π –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–æ–≤–æ—Å—Ç–µ–π.\n"
                         "–ö–Ω–æ–ø–∫–∞ 'üìã –ù–æ–≤–æ—Å—Ç–∏' –ø–æ–∑–≤–æ–ª–∏—Ç –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –Ω–æ–≤–æ—Å—Ç–µ–π.\n"
                         "–ö–Ω–æ–ø–∫–∞ 'üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è' –ø–æ–∑–≤–æ–ª–∏—Ç –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.",
                         reply_markup=get_main_keyboard())

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_keyboard():
    main = ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text='üìã –ù–æ–≤–æ—Å—Ç–∏'), KeyboardButton(text='üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è')]
    ],
    resize_keyboard=True,
    input_field_placeholder='–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é.')
    return main

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
@dp.message(F.text == 'üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è')
async def get_notification(message: Message):
    await message.answer('–í—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –Ω–æ–≤–æ—Å—Ç–µ–π?',
                         reply_markup=get_notification_keyboard())

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
def get_notification_keyboard():
    notification = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='‚úÖ –î–∞', callback_data='subscribe'), InlineKeyboardButton(text='‚ùå –ù–µ—Ç', callback_data='unsubscribe')]
    ]) 
    return notification

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
@dp.callback_query(F.data == 'subscribe')
async def subscribe(callback: CallbackQuery):
    await callback.answer('')
    await update_notifications_to_true(callback.from_user.id)
    await callback.message.edit_text('‚úÖ –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø–∏—Å–∫–∏ –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
@dp.callback_query(F.data == 'unsubscribe')
async def subscribe(callback: CallbackQuery):
    await callback.answer('')
    await update_notifications_to_false(callback.from_user.id)
    await callback.message.edit_text('‚ùå –¢–µ–ø–µ—Ä—å –≤—ã –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!')


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –Ω–æ–≤–æ—Å—Ç–∏ –Ω–∞ —Å–∞–π—Ç–µ Informburo
def parse_informburo_article_content(article_url):
    url = article_url
    header = {'user-agent': fake_useragent.UserAgent().random}
    response = requests.get(url, headers=header).text

    soup = BeautifulSoup(response, 'lxml')
    content_block = soup.find('div', class_='article')
    paragraphs = content_block.find_all('p')
    
    # –°–æ–±–∏—Ä–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤ –≤ —Å—Ç—Ä–æ–∫—É
    content = ''.join(paragraph.text for paragraph in paragraphs)
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –¥–æ 600 —Å–∏–º–≤–æ–ª–æ–≤
    content = content[:600] + '...'
    
    return content

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–æ–≤–æ—Å—Ç–µ–π —Å —Å–∞–π—Ç–∞ Informburo
async def parse_news_informburo():
    url = 'https://informburo.kz/novosti'
    header = {'user-agent': fake_useragent.UserAgent().random}
    response = requests.get(url, headers=header).text

    soup = BeautifulSoup(response, 'lxml')

    # –°–ø–∏—Å–æ–∫, –≤ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å—Å—è –¥–∞–Ω–Ω—ã–µ –æ –Ω–æ–≤—ã—Ö —Å—Ç–∞—Ç—å—è—Ö
    new_articles_data = []

    # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –±–ª–æ–∫–∞–º —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏ –Ω–∞ —Å–∞–π—Ç–µ
    for block in soup.find_all('li', class_='uk-grid uk-grid-small uk-margin-remove-top'):
        article_block = block.find('div', class_='uk-width-expand')
        photo_block = block.find('div', class_='uk-width-auto')
        article_photo = photo_block.find('img')['data-src']
        article_title = article_block.find('a').contents[0].strip()
        article_time = article_block.find('time', class_='article-time').text.strip()
        article_url = article_block.find('a')['href']
        article_content = parse_informburo_article_content(article_url)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ö—ç—à—Ç–µ–≥–∞
        try:
            article_mark = article_block.find('span', class_='article-mark').text.strip()
        except AttributeError:
            article_mark = '#–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π title –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        cursor.execute("SELECT id FROM informburo_news WHERE title = %s", (article_title,))
        result = cursor.fetchone()
        if not result:
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ —Å—Ç–∞—Ç—å–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            cursor.execute("INSERT INTO informburo_news (title, photo, time, mark, link, content) VALUES (%s, %s, %s, %s, %s, %s) RETURNING id",
                        (article_title, 'https://informburo.kz' + article_photo, article_time, article_mark, article_url, article_content))
            # –ü–æ–ª—É—á–∞–µ–º ID –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
            new_article_id = cursor.fetchone()[0]

            # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Ç–µ–∫—É—â–µ–π —Å—Ç–∞—Ç—å–µ
            article_info = {
                'ID': new_article_id,
                'Title': article_title,
                'Photo': 'https://informburo.kz' + article_photo,
                'Time': article_time,
                'Mark': article_mark,
                'Link': article_url,
                'Content': article_content
            }
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤–æ–π —Å—Ç–∞—Ç—å–µ –≤ —Å–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö —Å—Ç–∞—Ç–µ–π
            new_articles_data.append(article_info)

    # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–æ–≤—ã–µ —Å—Ç–∞—Ç—å–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    if new_articles_data:
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        cursor.execute("SELECT user_id FROM users WHERE notifications = TRUE")
        users = cursor.fetchall()
        for user_id in users:
            for article_info in new_articles_data:
                links = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text='–ß–∏—Ç–∞—Ç—å', url=article_info['Link'])]
                ])
                await bot.send_photo(user_id[0],
                                    photo=article_info['Photo'],
                                    caption=f'üîî –ù–æ–≤–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è!\nüìã –ó–∞–≥–æ–ª–æ–≤–æ–∫: {article_info["Title"]}\nüï∞ –í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {article_info["Time"]}\n{article_info["Mark"]}\n–°–∞–π—Ç: informburo.kz',
                                    reply_markup=links)

    # –§–∏–∫—Å–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    connection.commit()



# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –Ω–æ–≤–æ—Å—Ç–∏ –Ω–∞ —Å–∞–π—Ç–µ Nur
def parse_nur_article_content(article_url):
    url = article_url
    header = {'user-agent': fake_useragent.UserAgent().random}
    response = requests.get(url, headers=header).text

    soup = BeautifulSoup(response, 'lxml')
    content_block = soup.find('div', class_='formatted-body__content--wrapper')
    paragraphs = content_block.find_all('p', class_='align-left formatted-body__paragraph')
    
    # –°–æ–±–∏—Ä–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤ –≤ —Å—Ç—Ä–æ–∫—É
    content = ''.join(paragraph.text for paragraph in paragraphs)
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –¥–æ 600 —Å–∏–º–≤–æ–ª–æ–≤
    content = content[:600] + '...'
    
    return content

def parse_nur_article_photo(article_url):
    url = article_url
    header = {'user-agent': fake_useragent.UserAgent().random}
    response = requests.get(url, headers=header).text

    soup = BeautifulSoup(response, 'lxml')
    photo_block = soup.find('picture')
    photo = photo_block.find('img')['src']

    return photo


# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–æ–≤–æ—Å—Ç–µ–π —Å —Å–∞–π—Ç–∞ Nur
async def parse_news_nur():
    url = 'https://www.nur.kz/latest/'
    header = {'user-agent': fake_useragent.UserAgent().random}
    response = requests.get(url, headers=header).text

    soup = BeautifulSoup(response, "lxml")

    # –°–ø–∏—Å–æ–∫, –≤ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å—Å—è –¥–∞–Ω–Ω—ã–µ –æ –Ω–æ–≤—ã—Ö —Å—Ç–∞—Ç—å—è—Ö
    new_articles_data = []

    # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –±–ª–æ–∫–∞–º —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏ –Ω–∞ —Å–∞–π—Ç–µ
    for article in soup.find_all("a", class_="article-preview-category__content"):
        article_category = article.find("span", class_="article-preview-category__text").text.strip()
        article_title = article.find("h2", class_="article-preview-category__subhead").text.strip()
        article_url = f'{article.get("href")}'
        article_date_time = article.find("time").get("datetime")
        article_content = parse_nur_article_content(article_url)
        article_photo = parse_nur_article_photo(article_url)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π title –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        cursor.execute("SELECT id FROM nur_news WHERE title = %s", (article_title,))
        result = cursor.fetchone()
        if not result:
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ —Å—Ç–∞—Ç—å–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            cursor.execute("INSERT INTO nur_news (title, photo, time, category, link, content) VALUES (%s, %s, %s, %s, %s, %s) RETURNING id",
                           (article_title, article_photo, article_date_time, article_category, article_url, article_content))
            # –ü–æ–ª—É—á–∞–µ–º ID –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
            new_article_id = cursor.fetchone()[0]

            # Parse the time string including timezone information
            time_datetime = parser.parse(article_date_time)

            formatted_date = time_datetime.strftime('%d.%m.%Y %H:%M')

            # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Ç–µ–∫—É—â–µ–π —Å—Ç–∞—Ç—å–µ
            article_info = {
                'ID': new_article_id,
                'Title': article_title,
                'Photo': article_photo,
                'Date': formatted_date,
                'Category': article_category,
                'Link': article_url,
                'Content': article_content
            }
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤–æ–π —Å—Ç–∞—Ç—å–µ –≤ —Å–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö —Å—Ç–∞—Ç–µ–π
            new_articles_data.append(article_info)

    # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–æ–≤—ã–µ —Å—Ç–∞—Ç—å–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    if new_articles_data:
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        cursor.execute("SELECT user_id FROM users WHERE notifications = TRUE")
        users = cursor.fetchall()
        for user_id in users:
            for article_info in new_articles_data:
                links = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text='–ß–∏—Ç–∞—Ç—å', url=article_info['Link'])]
                ])
                await bot.send_photo(user_id[0],
                                    photo=article_info['Photo'],
                                    caption=f'üîî –ù–æ–≤–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è!\nüìã –ó–∞–≥–æ–ª–æ–≤–æ–∫: {article_info["Title"]}\nüï∞ –î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {article_info["Date"]}\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {article_info["Category"]}\n–°–∞–π—Ç: nur.kz',
                                    reply_markup=links)

    # –§–∏–∫—Å–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    connection.commit()



# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–æ–≤–æ—Å—Ç–µ–π
async def parse_news_periodically():
    while True:
        await parse_news_informburo()
        await parse_news_nur()
        await asyncio.sleep(60)




# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π Informburo
async def get_news_informburo(message: types.Message, page_number: int = 1):
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    items_per_page = 5  
    start_index = (page_number - 1) * items_per_page
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    cursor.execute("SELECT id, title, photo, time, mark, link FROM informburo_news ORDER BY id ASC OFFSET %s LIMIT %s", (start_index, items_per_page))
    news = cursor.fetchall()

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    for article_info in news:
        links = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='–†–∞—Å–∫—Ä—ã—Ç—å', callback_data=f'open_content_informburo_{article_info[0]}')],
            [InlineKeyboardButton(text='–ß–∏—Ç–∞—Ç—å', url=article_info[5])]
        ])

        await message.answer_photo(
            photo=article_info[2],
            caption=f'üìã –ó–∞–≥–æ–ª–æ–≤–æ–∫: {article_info[1]}\nüï∞ –í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {article_info[3]}\n{article_info[4]}',
            reply_markup=links
        )

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–∞–Ω–∏—Ü –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    cursor.execute("SELECT COUNT(*) FROM informburo_news")
    total_news_count = cursor.fetchone()[0]
    total_pages = total_news_count // items_per_page + (1 if total_news_count % items_per_page > 0 else 0)
    pagination_buttons = []
    if page_number > 1:
        pagination_buttons.append(InlineKeyboardButton(text='‚óÄÔ∏è', callback_data=f"informburo_page_{page_number - 1}"))
    pagination_buttons.append(InlineKeyboardButton(text=f'{page_number}/{total_pages}', callback_data="current_page"))
    if page_number < total_pages:
        pagination_buttons.append(InlineKeyboardButton(text='‚ñ∂Ô∏è', callback_data=f"informburo_page_{page_number + 1}"))
    pagination_keyboard = InlineKeyboardMarkup(inline_keyboard=[pagination_buttons])

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É:", reply_markup=pagination_keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞—Å–∫—Ä—ã—Ç–∏—è —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π Informburo
@dp.callback_query(lambda callback: callback.data.startswith('open_content_informburo_'))
async def read_content_informburo(callback: CallbackQuery):
    await callback.answer()
    article_id = int(callback.data.split('_')[-1])  # –ü–æ–ª—É—á–∞–µ–º ID —Å—Ç–∞—Ç—å–∏ –∏–∑ callback data
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç–∞—Ç—å–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    cursor.execute("SELECT * FROM informburo_news WHERE id = %s", (article_id,))
    article_info = cursor.fetchone()
    if article_info:
        links = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='–°–∫—Ä—ã—Ç—å', callback_data=f'close_content_informburo_{article_id}')],
            [InlineKeyboardButton(text='–ß–∏—Ç–∞—Ç—å', url=article_info[5])]
        ])
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–æ–≤—ã–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ–º —Å—Ç–∞—Ç—å–∏
        await bot.edit_message_caption(
            chat_id=callback.message.chat.id,
            message_id=callback.message.message_id,
            caption=f'üì∞–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: {article_info[6]}',
            reply_markup=links
        )
    else:
        await bot.send_message(callback.message.chat.id, "–°—Ç–∞—Ç—å—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∫—Ä—ã—Ç–∏—è —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π Informburo
@dp.callback_query(lambda callback: callback.data.startswith('close_content_informburo_'))
async def close_content_informburo(callback: CallbackQuery):
    await callback.answer()
    article_id = int(callback.data.split('_')[-1])  # –ü–æ–ª—É—á–∞–µ–º ID —Å—Ç–∞—Ç—å–∏ –∏–∑ callback data
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç–∞—Ç—å–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    cursor.execute("SELECT * FROM informburo_news WHERE id = %s", (article_id,))
    article_info = cursor.fetchone()
    if article_info:
        links = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='–†–∞—Å–∫—Ä—ã—Ç—å', callback_data=f'open_content_informburo_{article_id}')],
            [InlineKeyboardButton(text='–ß–∏—Ç–∞—Ç—å', url=article_info[5])]
        ])
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–∑–Ω–∞—á–∞–ª—å–Ω—ã–º –≤–∏–¥–æ–º
        await bot.edit_message_caption(
            chat_id=callback.message.chat.id,
            message_id=callback.message.message_id,
            caption=f'üìã –ó–∞–≥–æ–ª–æ–≤–æ–∫: {article_info[1]}\nüï∞ –í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {article_info[3]}\n{article_info[4]}',
            reply_markup=links
        )
    else:
        await bot.send_message(callback.message.chat.id, "–°—Ç–∞—Ç—å—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")







# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π Nur
async def get_news_nur(message: types.Message, page_number: int = 1):
    # –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    cursor.execute("SELECT * FROM nur_news")
    news = cursor.fetchall()

    items_per_page = 5  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    total_pages = len(news) // items_per_page + (1 if len(news) % items_per_page > 0 else 0)
    start_index = (page_number - 1) * items_per_page
    end_index = start_index + items_per_page
    paginated_news = news[start_index:end_index]

    for article_info in paginated_news:
        links = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='–†–∞—Å–∫—Ä—ã—Ç—å', callback_data=f'open_content_nur_{article_info[0]}')],
            [InlineKeyboardButton(text='–ß–∏—Ç–∞—Ç—å', url=article_info[5])]
        ])

        # Parse the time string including timezone information
        time_datetime = parser.parse(article_info[3])

        formatted_date = time_datetime.strftime('%d.%m.%Y %H:%M')

        await message.answer_photo(
            photo=article_info[2],
            caption=f'üìã –ó–∞–≥–æ–ª–æ–≤–æ–∫: {article_info[1]}\nüï∞ –î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {formatted_date}\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {article_info[4]}',
            reply_markup=links
        )

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    pagination_buttons = []
    if page_number > 1:
        pagination_buttons.append(InlineKeyboardButton(text='‚óÄÔ∏è', callback_data=f"nur_page_{page_number - 1}"))
    pagination_buttons.append(InlineKeyboardButton(text=f'{page_number}/{total_pages}', callback_data="current_page"))
    if page_number < total_pages:
        pagination_buttons.append(InlineKeyboardButton(text='‚ñ∂Ô∏è', callback_data=f"nur_page_{page_number + 1}"))
    pagination_keyboard = InlineKeyboardMarkup(inline_keyboard=[pagination_buttons])

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É:", reply_markup=pagination_keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞—Å–∫—Ä—ã—Ç–∏—è —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π Nur
@dp.callback_query(lambda callback: callback.data.startswith('open_content_nur_'))
async def read_content_nur(callback: CallbackQuery):
    await callback.answer()
    article_id = int(callback.data.split('_')[-1])  # –ü–æ–ª—É—á–∞–µ–º ID —Å—Ç–∞—Ç—å–∏ –∏–∑ callback data
    
    # –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç–∞—Ç—å–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    cursor.execute("SELECT * FROM nur_news WHERE id = %s", (article_id,))
    article_info = cursor.fetchone()
    
    if article_info:
        # Parse the time string including timezone information
        time_datetime = parser.parse(article_info[3])

        formatted_date = time_datetime.strftime('%d.%m.%Y %H:%M')

        links = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='–°–∫—Ä—ã—Ç—å', callback_data=f'close_content_nur_{article_id}')],
            [InlineKeyboardButton(text='–ß–∏—Ç–∞—Ç—å', url=article_info[5])]
        ])
         # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–æ–≤—ã–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ–º —Å—Ç–∞—Ç—å–∏
        await bot.edit_message_caption(
            chat_id=callback.message.chat.id,
            message_id=callback.message.message_id,
            caption=f'üì∞–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: {article_info[6]}',
            reply_markup=links
        )
    else:
        await bot.send_message(callback.message.chat.id, "–°—Ç–∞—Ç—å—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∫—Ä—ã—Ç–∏—è —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π Nur
@dp.callback_query(lambda callback: callback.data.startswith('close_content_nur_'))
async def close_content_nur(callback: CallbackQuery):
    await callback.answer()
    article_id = int(callback.data.split('_')[-1])  # –ü–æ–ª—É—á–∞–µ–º ID —Å—Ç–∞—Ç—å–∏ –∏–∑ callback data
    
    # –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç–∞—Ç—å–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    cursor.execute("SELECT * FROM nur_news WHERE id = %s", (article_id,))
    article_info = cursor.fetchone()
    
    if article_info:
        # Parse the time string including timezone information
        time_datetime = parser.parse(article_info[3])

        formatted_date = time_datetime.strftime('%d.%m.%Y %H:%M')

        links = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='–†–∞—Å–∫—Ä—ã—Ç—å', callback_data=f'open_content_nur_{article_id}')],
            [InlineKeyboardButton(text='–ß–∏—Ç–∞—Ç—å', url=article_info[5])]
        ])
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–∑–Ω–∞—á–∞–ª—å–Ω—ã–º –≤–∏–¥–æ–º
        await bot.edit_message_caption(
            chat_id=callback.message.chat.id,
            message_id=callback.message.message_id,
            caption=f'üìã –ó–∞–≥–æ–ª–æ–≤–æ–∫: {article_info[1]}\nüï∞ –î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {formatted_date}\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {article_info[4]}',
            reply_markup=links
        )
    else:
        await bot.send_message(callback.message.chat.id, "–°—Ç–∞—Ç—å—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–ª—è –Ω–≤–æ—Å—Ç–µ–π Informburo
@dp.callback_query(lambda callback_query: callback_query.data.startswith('informburo_page_'))
async def process_informburo_page_selection(callback_query: types.CallbackQuery):
    page_number = int(callback_query.data.split('_')[2])
    await get_news_informburo(callback_query.message, page_number)
    await bot.answer_callback_query(callback_query.id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–ª—è –Ω–æ–≤–æ—Å—Ç–µ–π Nur
@dp.callback_query(lambda callback_query: callback_query.data.startswith('nur_page_'))
async def process_nur_page_selection(callback_query: types.CallbackQuery):
    page_number = int(callback_query.data.split('_')[2])
    await get_news_nur(callback_query.message, page_number)
    await bot.answer_callback_query(callback_query.id)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
@dp.callback_query(lambda callback_query: callback_query.data == 'current_page')
async def subscribe(callback: CallbackQuery):
    await callback.answer('')



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "–ù–æ–≤–æ—Å—Ç–∏"
@dp.message(F.text == 'üìã –ù–æ–≤–æ—Å—Ç–∏')
async def get_notification(message: Message):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ –Ω–æ–≤–æ—Å—Ç–µ–π:',
                         reply_markup=get_news_keyboard())
    
def get_news_keyboard():
    news = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='Nur', callback_data='nur_news')],
        [InlineKeyboardButton(text='Informburo', callback_data='informburo_news')]
    ]) 
    return news

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–ª—è –≤—ã–≤–æ–¥–∞ –Ω–æ–≤–æ—Å—Ç–µ–π Informburo
@dp.callback_query(F.data == 'informburo_news')
async def informburo_news_button(callback: CallbackQuery):
    await callback.answer('')
    await bot.delete_message(callback.message.chat.id, callback.message.message_id)
    await get_news_informburo(callback.message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–ª—è –≤—ã–≤–æ–¥–∞ –Ω–æ–≤–æ—Å—Ç–µ–π Nur
@dp.callback_query(F.data == 'nur_news')
async def nur_news_button(callback: CallbackQuery):
    await callback.answer('')
    await bot.delete_message(callback.message.chat.id, callback.message.message_id)
    await get_news_nur(callback.message)







# –û—Å–Ω–æ–≤–Ω–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    # –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–æ–≤–æ—Å—Ç–µ–π
    asyncio.create_task(parse_news_periodically())
    # –ó–∞–ø—É—Å–∫ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    await dp.start_polling(bot)

# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–æ–≥—Ä–∞–º–º—É
if __name__ == '__main__':
    try:
        # –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
        asyncio.run(main())
    except KeyboardInterrupt:
        print('Exit')
